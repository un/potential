diff --git a/dist/adapters/drizzle-adapter/index.cjs b/dist/adapters/drizzle-adapter/index.cjs
index 0a020de01469f6fd50b5c1f3b2d6fffe2c266c2c..7913ca1c9103245803392716e1763a0990b46a93 100644
--- a/dist/adapters/drizzle-adapter/index.cjs
+++ b/dist/adapters/drizzle-adapter/index.cjs
@@ -172,9 +172,31 @@ const createTransform = (db, config, options) => {
         const res = await db.select().from(schemaModel).where(...clause);
         return res[0];
       } else if (builderVal) {
-        const tId = builderVal[0]?.id.value;
+              const tId = builderVal[0]?.id?.value;  
+      // const res = await db.select().from(schemaModel).where(drizzleOrm.eq(schemaModel.id, tId));
+      // return res[0];
+      if (tId) {
         const res = await db.select().from(schemaModel).where(drizzleOrm.eq(schemaModel.id, tId));
         return res[0];
+      }
+      const email = builderVal[0]?.email?.value;
+      if (email) {
+        const res = await db.select().from(schemaModel).where(drizzleOrm.eq(schemaModel.email, email));
+        return res[0];
+      }
+      const identifier = builderVal[0]?.identifier?.value;
+      if (identifier) {
+        const res = await db.select().from(schemaModel).where(drizzleOrm.eq(schemaModel.identifier, identifier));
+        return res[0];
+      }
+      const token = builderVal[0]?.token?.value;
+      if (token) {
+        const res = await db.select().from(schemaModel).where(drizzleOrm.eq(schemaModel.token, token));
+        return res[0];
+      }
+      console.error("ðŸš¨ couldnt find the id column for the BetterAuth model", { builderVal: builderVal[0] });
+      return null;
+    
       } else if (data.id) {
         const res = await db.select().from(schemaModel).where(drizzleOrm.eq(schemaModel.id, data.id));
         return res[0];
diff --git a/dist/adapters/drizzle-adapter/index.mjs b/dist/adapters/drizzle-adapter/index.mjs
index 67c8ca4e40f0c03c488de0753a4e507709d0ef21..f62f9353fac55abad507c753d2747061e1655900 100644
--- a/dist/adapters/drizzle-adapter/index.mjs
+++ b/dist/adapters/drizzle-adapter/index.mjs
@@ -1,26 +1,26 @@
-import { count, desc, asc, eq, inArray, like, lt, lte, and, or } from 'drizzle-orm';
-import '../../shared/better-auth.CepcSj5H.mjs';
-import '../../shared/better-auth.8zoxzg-F.mjs';
-import { g as generateId } from '../../shared/better-auth.BUPPRXfK.mjs';
-import 'zod';
-import 'better-call';
+import '@better-auth/utils';
+import '@better-auth/utils/base64';
 import '@better-auth/utils/hash';
+import '@better-auth/utils/hex';
+import '@better-auth/utils/random';
 import '@noble/ciphers/chacha';
 import '@noble/ciphers/utils';
 import '@noble/ciphers/webcrypto';
-import '@better-auth/utils/base64';
-import 'jose';
 import '@noble/hashes/scrypt';
-import '@better-auth/utils';
-import '@better-auth/utils/hex';
 import '@noble/hashes/utils';
+import 'better-call';
+import { and, asc, count, desc, eq, inArray, like, lt, lte, or } from 'drizzle-orm';
+import 'jose';
+import 'kysely';
+import 'zod';
+import { w as withApplyDefault } from '../../shared/better-auth.0TC26uRi.mjs';
+import '../../shared/better-auth.8zoxzg-F.mjs';
 import '../../shared/better-auth.B4Qoxdgc.mjs';
+import { g as generateId } from '../../shared/better-auth.BUPPRXfK.mjs';
+import '../../shared/better-auth.CepcSj5H.mjs';
 import '../../shared/better-auth.DH3YjMQH.mjs';
 import { g as getAuthTables } from '../../shared/better-auth.DORkW_Ge.mjs';
 import { B as BetterAuthError } from '../../shared/better-auth.DdzSJf-n.mjs';
-import 'kysely';
-import { w as withApplyDefault } from '../../shared/better-auth.0TC26uRi.mjs';
-import '@better-auth/utils/random';
 
 const createTransform = (db, config, options) => {
   const schema = getAuthTables(options);
@@ -170,9 +170,31 @@ const createTransform = (db, config, options) => {
         const res = await db.select().from(schemaModel).where(...clause);
         return res[0];
       } else if (builderVal) {
-        const tId = builderVal[0]?.id.value;
-        const res = await db.select().from(schemaModel).where(eq(schemaModel.id, tId));
-        return res[0];
+             const tId = builderVal[0]?.id?.value;  
+     // const res = await db.select().from(schemaModel).where(eq(schemaModel.id, tId));
+     // return res[0];
+     if (tId) {
+       const res = await db.select().from(schemaModel).where(eq(schemaModel.id, tId));
+       return res[0];
+     }
+     const email = builderVal[0]?.email?.value;
+     if (email) {
+       const res = await db.select().from(schemaModel).where(eq(schemaModel.email, email));
+       return res[0];
+     }
+     const identifier = builderVal[0]?.identifier?.value;
+     if (identifier) {
+       const res = await db.select().from(schemaModel).where(eq(schemaModel.identifier, identifier));
+       return res[0];
+     }
+     const token = builderVal[0]?.token?.value;
+     if (token) {
+       const res = await db.select().from(schemaModel).where(eq(schemaModel.token, token));
+       return res[0];
+     }
+     console.error("ðŸš¨ couldnt find the id column for the BetterAuth model", { builderVal: builderVal[0] });
+     return null;
+   
       } else if (data.id) {
         const res = await db.select().from(schemaModel).where(eq(schemaModel.id, data.id));
         return res[0];
